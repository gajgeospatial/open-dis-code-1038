--- Pdu.java	2010-12-08 14:53:06.000000000 -0800
+++ newPdu.java	2010-12-08 14:49:49.000000000 -0800
@@ -56,6 +56,12 @@
  public Pdu()
  {
  }
+   
+@Transient 
+public int getLength()
+{
+    return this.getMarshalledSize();    
+}
 
 @Transient  // Marked as transient to prevent hibernate from thinking this is a persistent property
 public int getMarshalledSize()
@@ -118,6 +124,17 @@
 { return pduType; 
 }
 
+/**
+* Returns the PduType, an enumeration from the disenum jar file. This is an enumerated
+* java type, rather than a simple short integer. This should NOT be marshalled to DIS
+* or XML.
+* @return this Pdu's type enumeration
+*/
+@Transient
+public PduType getPduTypeEnum() {
+   return PduType.lookup[pduType];
+}
+
 public void setProtocolFamily(short pProtocolFamily)
 { protocolFamily = pProtocolFamily;
 }
@@ -158,6 +175,56 @@
 { return padding; 
 }
 
+private long shiftBytes(int[] fourBytes)
+{
+   long value = 0;
+   value  = ((long) (fourBytes[0] << 24
+               | fourBytes[1] << 16
+               | fourBytes[2] << 8
+               | fourBytes[3]))
+               & 0xFFFFFFFFL;
+        
+   return value;
+}
+    
+public long readUnsignedInt(DataInputStream dis)
+{
+    int fourBytes[] = new int[4];
+        
+    try
+    {
+       fourBytes[0] = dis.readUnsignedByte();
+       fourBytes[1] = dis.readUnsignedByte();
+       fourBytes[2] = dis.readUnsignedByte();
+       fourBytes[3] = dis.readUnsignedByte();
+    }
+    catch(Exception e)
+    {
+        System.out.println(e);
+    }
+        
+    return this.shiftBytes(fourBytes);
+}
+    
+public long readUnsignedInt(java.nio.ByteBuffer buff)
+{
+        int fourBytes[] = new int[4];
+        
+        try
+        {
+            fourBytes[0] = ((int)buff.get()) & 0xff;
+            fourBytes[1] = ((int)buff.get()) & 0xff;
+            fourBytes[2] = ((int)buff.get()) & 0xff;
+            fourBytes[3] = ((int)buff.get()) & 0xff;
+        }
+        catch(Exception e)
+        {
+            System.out.println(e);
+        }
+        
+        return this.shiftBytes(fourBytes);
+    }
+    
 
 public void marshal(DataOutputStream dos)
 {
@@ -246,6 +313,87 @@
     marshal(buff);
     return data;
 }
+    
+    /**
+     * A convieneince method to marshal to a byte array with the timestamp set to
+     * the DIS standard for absolute timestamps (which works only if the host is
+     * slaved to NTP). This means the timestamp will roll over every hour.
+     * @return IEEE format byte array, with the timestamp set to the current DIS time
+     */
+    public byte[] marshalWithDisAbsoluteTimestamp() {
+        DisTime disTime = DisTime.getInstance();
+        this.setTimestamp(disTime.getDisAbsoluteTimestamp());
+        return this.marshal();
+    }
+    
+    public void marshalWithDisAbsoluteTimestamp(java.nio.ByteBuffer buff) {
+        DisTime disTime = DisTime.getInstance();
+        this.setTimestamp(disTime.getDisAbsoluteTimestamp());
+        this.marshal(buff);
+    }
+    
+    
+    /**
+     * A convieneince method to marshal to a byte array with the timestamp set to
+     * the DIS standard for relative timestamps. The timestamp will roll over every
+     * hour
+     * @return IEEE format byte array, with the timestamp set to relative DIS time
+     */
+    public byte[] marshalWithDisRelativeTimestamp() {
+        DisTime disTime = DisTime.getInstance();
+        this.setTimestamp(disTime.getDisRelativeTimestamp());
+        return this.marshal();
+    }
+    
+    public void marshalWithDisRelativeTimestamp(java.nio.ByteBuffer buff) {
+        DisTime disTime = DisTime.getInstance();
+        this.setTimestamp(disTime.getDisRelativeTimestamp());
+        this.marshal(buff);
+    }
+    
+    /**
+     * A convienience method to marshal a PDU using the NPS-specific format for
+     * timestamps, which is hundredths of a second since the start of the year.
+     * This effectively eliminates the rollover issues from a practical standpoint.
+     * @return IEEE format byte array, with the timestamp set to hundredths of a second since the start of the year
+     */
+    public byte[] marshalWithNpsTimestamp() {
+        DisTime disTime = DisTime.getInstance();
+        this.setTimestamp(disTime.getNpsTimestamp());
+        return this.marshal();
+    }
+    
+    public void marshalWithNpsTimestamp(java.nio.ByteBuffer buff) {
+        DisTime disTime = DisTime.getInstance();
+        this.setTimestamp(disTime.getNpsTimestamp());
+        this.marshal(buff);
+    }
+    
+    /**
+     * Another option for marshalling with the timestamp field set automatically. The UNIX
+     * time is conventionally seconds since January 1, 1970. UTC time is used, and leap seconds
+     * are excluded. This approach is popular in the wild, but the time resolution is not very
+     * good for high frequency updates, such as aircraft. An entity updating at 30 PDUs/second
+     * would see 30 PDUs sent out with the same timestamp, and have 29 of them discarded as
+     * duplicate packets.
+     *
+     * Note that there are other "Unix times", such milliseconds since 1/1/1970, saved in a long.
+     * This cannot be used, since the value is saved in a long. Java's System.getCurrentTimeMillis()
+     * uses this value.
+     * @return IEEE format byte array, with the timetamp set to seconds since 1970
+     */
+    public byte[] marshalWithUnixTimestamp() {
+        DisTime disTime = DisTime.getInstance();
+        this.setTimestamp(disTime.getUnixTimestamp());
+        return this.marshal();
+    }
+    
+    public void marshalWithUnixTimestamp(java.nio.ByteBuffer buff) {
+        DisTime disTime = DisTime.getInstance();
+        this.setTimestamp(disTime.getUnixTimestamp());
+        this.marshal(buff);
+    }
+    
 
  /**
   * The equals method doesn't always work--mostly it works only on classes that consist only of primitives. Be careful.
