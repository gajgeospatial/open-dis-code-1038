--- EntityID.java	2011-01-11 10:23:50.000000000 -0800
+++ EntityID.java.orig	2011-01-11 10:16:36.000000000 -0800
@@ -161,20 +161,38 @@
  } // end of unmarshal method 
 
 
- /**
-  * The equals method doesn't always work--mostly it works only on classes that consist only of primitives. Be careful.
-  */
- public boolean equals(EntityID rhs)
- {
-     boolean ivarsEqual = true;
-
-    if(rhs.getClass() != this.getClass())
-        return false;
-
-     if( ! (site == rhs.site)) ivarsEqual = false;
-     if( ! (application == rhs.application)) ivarsEqual = false;
-     if( ! (entity == rhs.entity)) ivarsEqual = false;
-
-    return ivarsEqual;
- }
+    /**
+     * This equals method actually does work. Go ahead and use it. It's useful
+     * for hash table keys when looking up entities.
+     */
+    public boolean equals(EntityID rhs)
+    {
+        boolean ivarsEqual = true;
+        
+        if(rhs.getClass() != this.getClass())
+            return false;
+        
+        if( ! (site == rhs.site)) ivarsEqual = false;
+        if( ! (application == rhs.application)) ivarsEqual = false;
+        if( ! (entity == rhs.entity)) ivarsEqual = false;
+        
+        return ivarsEqual;
+    }
+    
+    /**
+     * Override of base class hashCode. This is convienent to use when looking up entities in
+     * a hash table. It uses the application and entity IDs to fill out the 32 bits. The idea
+     * is to get a "pretty close" to unique hashcode for each entity ID in 32 bits, and the
+     * best way to do that is leave out the site ID while keeping the rest, which tends to
+     * be more unique.
+     */
+    @Override
+    public int hashCode()
+    {
+        int hashcode = application; 
+        hashcode = hashcode << 16;
+        hashcode = hashcode + entity;
+        return hashcode;
+    }
+	
 } // end of class
