<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Spatial Reference Model Java API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindexHL" href="main.htm">Main&nbsp;Page</a> | <a class="qindex" href="namespaces.htm">Packages</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Compound&nbsp;List</a> | <a class="qindex" href="namespacemembers.htm">Namespace&nbsp;Members</a> | <a class="qindex" href="functions.htm">Compound&nbsp;Members</a> | <a class="qindex" href="pages.htm">Related&nbsp;Pages</a></div>
<h1>Spatial Reference Model (<a class="el" href="a00367.htm">SRM</a>) Java API </h1>
<p>
<h3 align="center">Version 4.4.0 </h3><h2><a name="Introduction"></a>
Introduction</h2>
This is the documentation for the <a class="el" href="a00367.htm">SRM</a> Java API.<p>
All classes in this API are in the <em><a class="el" href="a00367.htm">SRM</a></em> package.<p>
The <a class="el" href="a00367.htm">SRM</a> classes provide the following functionality:<ul>
<li>Creation<ul>
<li>SRFs<ul>
<li>SRF templates (e.g., LSR 3D, TM_AUGMENTED_3D, Celestiodetic, Celestiocentric)</li><li>SRF set members (e.g., UTM zone 12, GTRS cell 1234, UPS northern pole)</li><li>SRFs (e.g., British National Grid Airy)</li></ul>
</li><li>Coordinates<ul>
<li>2D coordinate</li><li>3D coordinate</li><li>Surface coordinate</li></ul>
</li><li>Directions</li><li>Orientations</li></ul>
</li><li>Conversion<ul>
<li>Coordinate conversion between SRFs</li><li>Direction conversion between SRFs</li><li>Orientation conversion between SRFs</li></ul>
</li><li>Validation<ul>
<li>Coordinate validation within a SRF</li><li>Direction validation within a SRF</li><li>Orientation validation within a SRF</li></ul>
</li><li>Calculations<ul>
<li>Euclidean distance</li><li>Geodesic distance</li><li>Point scale</li><li>Vertical separation offset</li><li>Convergence of the Meridian</li><li>Map azimuth</li></ul>
</li><li>Abstract space coordinate instancing in a SRF</li></ul>
<p>
A sample program to convert a Celestiodetic 3D coordinate to a Celestiocentric 3D coordinate is as follows: <div class="fragment"><pre><span class="keyword">import</span> SRM.*;

<span class="keyword">public</span> <span class="keyword">class </span>CdToCcConv
{
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keywordtype">void</span> main (String args[])
    {
        System.out.println(<span class="stringliteral">"*** Sample program using SRM Java API to convert a 3D coordinate"</span>);
        System.out.println(<span class="stringliteral">"*** from a Celestiodetic SRF to a Celestiocentric SRF."</span>);

        <span class="comment">// Declare reference variables for the CD_3D and CC_3D SRFs</span>
        SRF_Celestiodetic CdSrf = null;
        SRF_Celestiocentric CcSrf = null;

        <span class="keywordflow">try</span>
        {
            <span class="comment">// Create a Celestiodetic SRF with WGS 1984 and Identity transformation</span>
            CdSrf = <span class="keyword">new</span> SRF_Celestiodetic(SRM_ORM_Code.ORMCOD_WGS_1984,
                                          SRM_RT_Code.RTCOD_WGS_1984_IDENTITY);

            <span class="comment">// Create a Celestiocentric SRF with WGS 1984 and Identity transformation</span>
            CcSrf = <span class="keyword">new</span> SRF_Celestiocentric(SRM_ORM_Code.ORMCOD_WGS_1984,
                                            SRM_RT_Code.RTCOD_WGS_1984_IDENTITY);

            <span class="comment">// Create a 3D Celestiodetic coordinate with</span>
            <span class="comment">// longitude           =&gt; 10.0 degrees (note: this input parameter is converted to radians)</span>
            <span class="comment">// latitude            =&gt; 20.0 degrees (note: this input parameter is converted to radians)</span>
            <span class="comment">// ellipsoidal height =&gt; 100.0 meters</span>
            Coord3D_Celestiodetic CdCoord =
                (Coord3D_Celestiodetic)CdSrf.createCoordinate3D(Math.toRadians(10.0),
                                                                Math.toRadians(20.0),
                                                                100.0);

            <span class="comment">// Instantiate a 3D Celestiocentric coordinate</span>
            <span class="comment">// This is an alternative method for instantiate a 3D coordinate</span>
            Coord3D_Celestiocentric CcCoord = <span class="keyword">new</span> Coord3D_Celestiocentric(CcSrf);

            <span class="comment">// print out the SRF parameter values and the coordinate component values</span>
            System.out.println(<span class="stringliteral">"CdSrf parameter =&gt;  \n"</span> + CdSrf);
            System.out.println(<span class="stringliteral">"CcSrf parameter =&gt;  \n"</span> + CcSrf);
            System.out.println(<span class="stringliteral">"CdCoord components (source) =&gt; \n"</span> + CdCoord);

            <span class="comment">// convert the 3D Celestiodetic coordinate to 3D Celestiocentric coordinate</span>
            <a class="code" href="a00367.htm#a146">SRM_Coordinate_Valid_Region_Code</a> valRegion =
                CcSrf.changeCoordinateSRF(CdCoord, CcCoord);

            <span class="comment">// print out the values of the resulting 3D Celestiocentric coordinate</span>
            System.out.println(<span class="stringliteral">"CcCoord components (destination) =&gt; \n"</span> + CcCoord + <span class="stringliteral">" is "</span> + valRegion);
        }
        <span class="keywordflow">catch</span> (SrmException ex)
        {
            <span class="comment">// catch SrmException and print out the error code and text.</span>
            System.out.println(<span class="stringliteral">"Exception caught=&gt; "</span> + ex.what() + <span class="stringliteral">", "</span> + ex);
        }
    }
}
</pre></div><p>
Running the sample program above will produce output as follows: <div class="fragment"><pre>
*** Sample program using SRM Java API to convert a 3D coordinate
*** from a Celestiodetic SRF to a Celestiocentric SRF.
CdSrf parameter =&gt;
orm: ORMCOD_WGS_1984
rt: RTCOD_WGS_1984_IDENTITY
CcSrf parameter =&gt;
orm: ORMCOD_WGS_1984
rt: RTCOD_WGS_1984_IDENTITY
CdCoord components (source) =&gt;
[ 0.17453292519943295, 0.3490658503988659, 100.0 ]
CcCoord components (destination) =&gt;
[ 5904838.698311626, 1041182.3792437915, 2167730.9898430835 ] is VALID
</pre></div><hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><strong>Spatial Reference Model Java API</strong></td>
<td align="right"><strong>
Version 4.4.0 - January 21, 2010
</strong></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2010 <a href="http://www.sedris.org">SEDRIS</a>&#153;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.3.2</td>
</tr>
</table>
</body>
</html>
