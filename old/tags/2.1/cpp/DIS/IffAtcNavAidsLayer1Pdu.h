#ifndef IFFATCNAVAIDSLAYER1PDU_H
#define IFFATCNAVAIDSLAYER1PDU_H

#include <DIS/EntityID.h>
#include <DIS/EventID.h>
#include <DIS/Vector3Float.h>
#include <DIS/SystemID.h>
#include <DIS/IffFundamentalData.h>
#include <DIS/DistributedEmissionsFamilyPdu.h>
#include <DIS/DataStream.h>
#include <DIS/msLibMacro.h>


namespace DIS
{
// 5.3.7.4.1: Navigational and IFF PDU. COMPLETE

// Copyright (c) 2007, MOVES Institute, Naval Postgraduate School. All rights reserved. 
//
// This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
//
// @author DMcG, jkg

class EXPORT_MACRO IffAtcNavAidsLayer1Pdu : public DistributedEmissionsFamilyPdu
{
protected:
  // ID of the entity that is the source of the emissions
  EntityID _emittingEntityId; 

  // Number generated by the issuing simulation to associate realted events.
  EventID _eventID; 

  // Location wrt entity. There is some ambugiuity in the standard here, but this is the order it is listed in the table.
  Vector3Float _location; 

  // System ID information
  SystemID _systemID; 

  // padding
  unsigned short _pad2; 

  // fundamental parameters
  IffFundamentalData _fundamentalParameters; 


 public:
    IffAtcNavAidsLayer1Pdu();
    virtual ~IffAtcNavAidsLayer1Pdu();

    virtual void marshal(DataStream& dataStream) const;
    virtual void unmarshal(DataStream& dataStream);

    EntityID& getEmittingEntityId(); 
    const EntityID&  getEmittingEntityId() const; 
    void setEmittingEntityId(const EntityID    &pX);

    EventID& getEventID(); 
    const EventID&  getEventID() const; 
    void setEventID(const EventID    &pX);

    Vector3Float& getLocation(); 
    const Vector3Float&  getLocation() const; 
    void setLocation(const Vector3Float    &pX);

    SystemID& getSystemID(); 
    const SystemID&  getSystemID() const; 
    void setSystemID(const SystemID    &pX);

    unsigned short getPad2() const; 
    void setPad2(unsigned short pX); 

    IffFundamentalData& getFundamentalParameters(); 
    const IffFundamentalData&  getFundamentalParameters() const; 
    void setFundamentalParameters(const IffFundamentalData    &pX);


virtual int getMarshalledSize() const;

     bool operator  ==(const IffAtcNavAidsLayer1Pdu& rhs) const;
};
}

#endif
