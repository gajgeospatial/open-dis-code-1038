--- VariableDatum.java	2010-12-14 14:09:18.000000000 -0800
+++ newVariableDatum.java	2010-12-14 16:38:18.000000000 -0800
@@ -88,7 +88,7 @@
 @XmlAttribute
 @Basic
 public long getVariableDatumLength()
-{ return (long)variableDatums.size();
+{ return (long)variableDatums.size() * 64; // patch to fix units; bits rather than bytes
 }
 
 /** Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
@@ -114,7 +114,7 @@
     try 
     {
        dos.writeInt( (int)variableDatumID);
-       dos.writeInt( (int)variableDatums.size());
+       dos.writeInt( (int)variableDatums.size() * 64 ); // post-processing patch to fix units; bits rather than bytes
 
        for(int idx = 0; idx < variableDatums.size(); idx++)
        {
@@ -134,6 +134,9 @@
     {
        variableDatumID = dis.readInt();
        variableDatumLength = dis.readInt();
+        int over = variableDatumLength % 64 > 0 ? 1 : 0; // post-processing patch to fix units problem
+        variableDatumLength = (variableDatumLength / 64) + over;
+        
        for(int idx = 0; idx < variableDatumLength; idx++)
        {
            EightByteChunk anX = new EightByteChunk();
@@ -160,7 +163,7 @@
 public void marshal(java.nio.ByteBuffer buff)
 {
        buff.putInt( (int)variableDatumID);
-       buff.putInt( (int)variableDatums.size());
+       buff.putInt( (int)variableDatums.size() * 64 ); // post-processing patch to fix units; bits rather than bytes
 
        for(int idx = 0; idx < variableDatums.size(); idx++)
        {
@@ -181,6 +184,8 @@
 {
        variableDatumID = buff.getInt();
        variableDatumLength = buff.getInt();
+       int over = variableDatumLength % 64 > 0 ? 1 : 0; // post-processing patch to fix units problem
+       variableDatumLength = (variableDatumLength / 64) + over;
        for(int idx = 0; idx < variableDatumLength; idx++)
        {
             EightByteChunk anX = new EightByteChunk();
