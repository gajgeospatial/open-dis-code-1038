/*
 * UDPCaptureFrame.java
 *
 * Created on June 1, 2009, 9:46 AM
 * 
 * 
 *   
 * This class is to make the app easier to use
 * 
 * It provides a way for the user to manage the listener list
 * This information could as easily be supplied to the xplaneLister 
 * as a text data file.
 * 
 * The UDP Listener can be run as a stand-alone, this class only
 * provides a GUI for changing the XPlaneUDPListener profile and managing
 * multiple Listeners in one application
 * 
 * The methods of this class are not well documented as it is only peripheral
 * to the listener application.
 * 
 * For the most part developers that want to define their own interface with the 
 * listener class can ignore this and the listener edit frame.
 * 
 * The necessary parameters for a listener can be hard coded into the listener
 * and then the listener can be run from its own main method
 * 
 * 
 * 
 * 
 * 
 */
package edu.nps.moves.xplane;

/**
 *
 * @author  tmrashid
 * @version 2.0
 */
import java.util.Map.*;
import java.util.List;
import java.util.ArrayList;



public class UDPCaptureFrame extends javax.swing.JFrame {

    private final String GUI_TITLE = "X-Plane UDP to DIS Application";
    private final String VERSION_NUMBER = "1.0";
    private final String TRADEMARK_INFO = "(X-Plane is a registered trademark of Laminar Research)";
    private final boolean DEBUG = true;
    private final int MAX_NUM_LISTENERS = 4;
    private final int MAX_NAME_LENGTH = 8;
    private int idCounter = 0;    //For storing active and inactive listeners
    private List<XPlaneUDPListener> listeners = new ArrayList<XPlaneUDPListener>();
    private List<Thread> updateThreads = new ArrayList<Thread>();
    private Thread updateThread;

    /** Creates new form UDPCaptureFrame */
    public UDPCaptureFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addListenerButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listenerListWindow = new javax.swing.JList();
        removeListenerButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        messageTextField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        monitorPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        dataArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        instructionsPanel = new javax.swing.JTextPane();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(GUI_TITLE + " " + VERSION_NUMBER + " " + TRADEMARK_INFO);
        setMinimumSize(new java.awt.Dimension(800, 640));
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });

        addListenerButton.setFont(new java.awt.Font("Tahoma", 1, 14));
        addListenerButton.setText("ADD");
        addListenerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addListenerButtonMouseClicked(evt);
            }
        });

        listenerListWindow.setFont(new java.awt.Font("Tahoma", 1, 14));
        listenerListWindow.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listenerListWindow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listenerListWindowMouseClicked(evt);
            }
        });
        listenerListWindow.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listenerListWindowValueChanged(evt);
            }
        });
        listenerListWindow.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                listenerListWindowFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(listenerListWindow);

        removeListenerButton.setFont(new java.awt.Font("Tahoma", 1, 14));
        removeListenerButton.setText("REMOVE");
        removeListenerButton.setEnabled(false);
        removeListenerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeListenerButtonMouseClicked(evt);
            }
        });

        messageTextField.setFont(new java.awt.Font("Tahoma", 1, 14));

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel19.setText("Messages");

        monitorPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        dataArea.setColumns(20);
        dataArea.setRows(5);
        jScrollPane2.setViewportView(dataArea);

        instructionsPanel.setBackground(new java.awt.Color(236, 233, 216));
        instructionsPanel.setFont(new java.awt.Font("Tahoma", 1, 14));
        instructionsPanel.setText("Ensure that you have the following data rows selected in X-plane\n\n03  Mach, G-load\n15  angular velocities\n15  pitch, roll, headings\n18  lat, lon, attitude\n19  loc, vel, dist travelled");
        jScrollPane3.setViewportView(instructionsPanel);

        javax.swing.GroupLayout monitorPanelLayout = new javax.swing.GroupLayout(monitorPanel);
        monitorPanel.setLayout(monitorPanelLayout);
        monitorPanelLayout.setHorizontalGroup(
            monitorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(monitorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addContainerGap())
        );
        monitorPanelLayout.setVerticalGroup(
            monitorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, monitorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(monitorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE))
                .addContainerGap())
        );

        startButton.setFont(new java.awt.Font("Tahoma", 1, 14));
        startButton.setText("START");
        startButton.setEnabled(false);
        startButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startButtonMouseClicked(evt);
            }
        });

        stopButton.setFont(new java.awt.Font("Tahoma", 1, 14));
        stopButton.setText("STOP");
        stopButton.setEnabled(false);
        stopButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
                    .addComponent(monitorPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(addListenerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeListenerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                        .addComponent(startButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton)
                        .addGap(74, 74, 74))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(messageTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addListenerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeListenerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                    .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(messageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(monitorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
 * If the maximum number of listeners has not been reached, this will instantiate a 
 * new XPlaneUDPListener and open a ListenerEditFrame
 * @param evt
 */
private void addListenerButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addListenerButtonMouseClicked


    if (listeners.size() < MAX_NUM_LISTENERS) {

        XPlaneUDPListener ul = new XPlaneUDPListener();

        ul.setEntityID(idCounter);
        idCounter++;

        //Edit the parameters of the new Listener
        
        messageTextField.setText("Just tried to add a Listener");
        
        ListenerEditFrame lef = new ListenerEditFrame();
        lef.initializeEditFrame(ul);
        lef.setVisible(true);

        //Place it in the container
        listeners.add(ul);

        //Instantiate an associated Thread
        ul.runUDPListener = new java.lang.Thread(ul);

        ul.runUDPListener.setName(ul.toString());

        //Set the display 
        listenerListWindow.setListData(listeners.toArray());

    } else {
        messageTextField.setText("Maximum Number of Listeners is " + MAX_NUM_LISTENERS);
    }//End if listeners.size < MAX_NUM
}//GEN-LAST:event_addListenerButtonMouseClicked

private void removeListenerButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeListenerButtonMouseClicked
// Removes the selected listener from the list
    /**
     * removeListenerButtonMouseClicked
     * Removes the selected listener from the list
     */
    //Interrupt the display thread
    updateThread.interrupt();
    
    listeners.remove(listenerListWindow.getSelectedValue());

    //Reset the list window
    listenerListWindow.setListData(listeners.toArray());
    removeListenerButton.setEnabled(false);
}//GEN-LAST:event_removeListenerButtonMouseClicked
private void listenerListWindowValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listenerListWindowValueChanged
// TODO add your handling code here:

    setButtons((XPlaneUDPListener) listenerListWindow.getSelectedValue());


}//GEN-LAST:event_listenerListWindowValueChanged

private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
// TODO add your handling code here:
    listenerListWindow.setListData(listeners.toArray());

}//GEN-LAST:event_formWindowGainedFocus

private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
// If the entire form loses focus I want the buttons disabled
    removeListenerButton.setEnabled(false);
    startButton.setEnabled(false);
    stopButton.setEnabled(false);
    listenerListWindow.setListData(listeners.toArray());

}//GEN-LAST:event_formWindowLostFocus

private void listenerListWindowMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listenerListWindowMouseClicked
// TODO add your handling code here:
    setButtons((XPlaneUDPListener) listenerListWindow.getSelectedValue());
}//GEN-LAST:event_listenerListWindowMouseClicked

private void startButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startButtonMouseClicked
// If the start button is clicked, make sure its enabled first
//If it is enabled ensure that something is selected, in which case

    if (startButton.isEnabled()) {


        //If nothing is selected just return
        try {
            if (listenerListWindow.isSelectionEmpty()) {
                messageTextField.setText("There is No Listener Selected!");
                return;
            }


            //If the selected listener is active do nothing
            if (((XPlaneUDPListener) listenerListWindow.getSelectedValue()).getConnectionManager().isUDPCaptureActive()) {
                return;

            }


            startUDPListener((XPlaneUDPListener) listenerListWindow.getSelectedValue());


            startButton.setSelected(true);
            startButton.setEnabled(false);
            stopButton.setEnabled(true);


            listenerListWindow.setListData(listeners.toArray());

        } catch (Exception e) {
        }//end try catch

    }
}//GEN-LAST:event_startButtonMouseClicked

private void stopButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopButtonMouseClicked
// TODO add your handling code here:
    if (stopButton.isEnabled()) {


        //If nothing is selected just return
        try {
            if (listenerListWindow.isSelectionEmpty()) {
                messageTextField.setText("There is No Listener Selected!");
                return;
            }


            //If the selected listener is not active do nothing
            if (!((XPlaneUDPListener) listenerListWindow.getSelectedValue()).getConnectionManager().isUDPCaptureActive()) {
                return;

            }

            stopUDPListener((XPlaneUDPListener) listenerListWindow.getSelectedValue());


            listenerListWindow.setListData(listeners.toArray());

            stopButton.setSelected(true);
            stopButton.setEnabled(false);
            startButton.setEnabled(true);



        } catch (Exception e) {
        }//end try catch



    }
}//GEN-LAST:event_stopButtonMouseClicked

private void listenerListWindowFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_listenerListWindowFocusGained
// TODO add your handling code here:
    setButtons((XPlaneUDPListener) listenerListWindow.getSelectedValue());


}//GEN-LAST:event_listenerListWindowFocusGained

/**
 * Resets the GUI Buttons 
 * @param selectedListener
 */
    private void setButtons(XPlaneUDPListener selectedListener) {


        startButton.setSelected(false);
        stopButton.setSelected(false);


        /* If there is something selected in the listener list window enable
         * the buttons
         */
        if (!listenerListWindow.isSelectionEmpty()) {
            removeListenerButton.setEnabled(true);
            messageTextField.setText("Selected Listener is " + ((selectedListener.getConnectionManager().isUDPCaptureActive())?"ACTIVE":"OFF") );
           if (selectedListener.getConnectionManager().isUDPCaptureActive()){
               stopButton.setEnabled(true);
               startButton.setEnabled(false);
           }else {
                stopButton.setEnabled(false);
                startButton.setEnabled(true);
           }
            
           
        }
    }


    /**startUDPListener
     * @param XPlaneUDPListener
     * @return void
     * 
     * Takes the passed in XPlaneUDPListener and starts its internal thread
     */
    public void startUDPListener(XPlaneUDPListener selectedListener) {

        //This is how you control the while loop inside the listener
        selectedListener.getConnectionManager().setUPDActive(true);
        if (DEBUG) System.out.println("Status"  +  selectedListener.getConnectionManager().isUDPCaptureActive() );
        
        if (!selectedListener.runUDPListener.isAlive()){
            if (DEBUG) System.out.println("Thread interrupred trying a new one");
            selectedListener.runUDPListener = new java.lang.Thread(selectedListener);
            selectedListener.runUDPListener.start();
        }else  selectedListener.runUDPListener.start();

        //Refresh the window
        listenerListWindow.setListData(listeners.toArray());
        
          messageTextField.setText("Selected Listener is " + ((selectedListener.getConnectionManager().isUDPCaptureActive())?"ACTIVE":"OFF") );
        
        setButtons((XPlaneUDPListener)listenerListWindow.getSelectedValue());
        
        DataAreaUpdater dau = new DataAreaUpdater();
        
        updateThread = new Thread(dau);
        
        updateThread.start();
      

    }//End startUPDListener

 /**stopUDPListener
 * @param XPlaneUDPListener
 * @return void
 * 
 * Takes the passed in XPlaneUDPListener and stops its internal thread
 */
    public void stopUDPListener(XPlaneUDPListener selectedListener) {

        //Turn off 
         if (DEBUG) System.out.println("Stop button pressed");
         
         updateThread.interrupt();
        
        selectedListener.getConnectionManager().setUPDActive(false);
        
         if (DEBUG) System.out.println("Status"  +  selectedListener.getConnectionManager().isUDPCaptureActive() );
   
        selectedListener.runUDPListener.interrupt();
        
        
        //Refresh the window
        listenerListWindow.setListData(listeners.toArray());
       
        messageTextField.setText("Selected Listener is " + ((selectedListener.getConnectionManager().isUDPCaptureActive())?"ACTIVE":"OFF") );

    }//end stopUDPListener
    
    
    public void setDataTextArea(XPlaneUDPListener selectedListener){
        
        //dataTextArea.append(selectedListener.getConnectionManager().);
        
    }
    
    
    
    
    /**
     * The purpose of this inner class is to update the data area
     */
    private class DataAreaUpdater implements Runnable{
        
        
        public void run(){
            
           while(true) {
               try{
             try{
                
            dataArea.setText(  ((XPlaneUDPListener)listenerListWindow.getSelectedValue()).getMessage()+"\n");
            if (Thread.currentThread().isInterrupted()) break;
             }catch(NullPointerException npe){
                 
             }
               }catch(ArrayIndexOutOfBoundsException aob){
                   
               }
           }
        }
        
        
        
        
    }//end Class DataAreaUpdater
    
    
    
    
    
    


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new UDPCaptureFrame().setVisible(true);
                
                
 
           }//End run

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addListenerButton;
    private javax.swing.JTextArea dataArea;
    private javax.swing.JTextPane instructionsPanel;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList listenerListWindow;
    private javax.swing.JTextField messageTextField;
    private javax.swing.JPanel monitorPanel;
    private javax.swing.JButton removeListenerButton;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables

}
